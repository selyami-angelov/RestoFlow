// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RestoFlow.Infrastructure.Data;

#nullable disable

namespace RestoFlow.Infrastructure.Migrations
{
    [DbContext(typeof(RestoFlowDbContext))]
    [Migration("20230702121650_product-price-seed")]
    partial class productpriceseed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RestoFlow.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("RestoFlow.Infrastructure.Data.Models.Bill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("TableId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalSum")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.HasIndex("UserId");

                    b.ToTable("Bill");
                });

            modelBuilder.Entity("RestoFlow.Infrastructure.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "Main Dishes"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "Desserts"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "Beverages"
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Name = "Salads"
                        });
                });

            modelBuilder.Entity("RestoFlow.Infrastructure.Data.Models.OccupiedTable", b =>
                {
                    b.Property<int>("TableId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("TableId", "UserId", "OrderId");

                    b.HasIndex("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("OccupiedTables");

                    b.HasData(
                        new
                        {
                            TableId = 1,
                            UserId = "b08ba7ee-0960-4656-baf4-980b1d6b88df",
                            OrderId = 1
                        },
                        new
                        {
                            TableId = 2,
                            UserId = "b08ba7ee-0960-4656-baf4-980b1d6b88df",
                            OrderId = 2
                        },
                        new
                        {
                            TableId = 3,
                            UserId = "b08ba7ee-0960-4656-baf4-980b1d6b88df",
                            OrderId = 3
                        },
                        new
                        {
                            TableId = 4,
                            UserId = "b08ba7ee-0960-4656-baf4-980b1d6b88df",
                            OrderId = 4
                        },
                        new
                        {
                            TableId = 5,
                            UserId = "b08ba7ee-0960-4656-baf4-980b1d6b88df",
                            OrderId = 5
                        },
                        new
                        {
                            TableId = 6,
                            UserId = "b08ba7ee-0960-4656-baf4-980b1d6b88df",
                            OrderId = 6
                        },
                        new
                        {
                            TableId = 7,
                            UserId = "b08ba7ee-0960-4656-baf4-980b1d6b88df",
                            OrderId = 7
                        },
                        new
                        {
                            TableId = 8,
                            UserId = "b08ba7ee-0960-4656-baf4-980b1d6b88df",
                            OrderId = 8
                        },
                        new
                        {
                            TableId = 9,
                            UserId = "b08ba7ee-0960-4656-baf4-980b1d6b88df",
                            OrderId = 9
                        },
                        new
                        {
                            TableId = 10,
                            UserId = "b08ba7ee-0960-4656-baf4-980b1d6b88df",
                            OrderId = 10
                        });
                });

            modelBuilder.Entity("RestoFlow.Infrastructure.Data.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("BillId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("EditedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Info")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsReady")
                        .HasColumnType("bit");

                    b.Property<bool>("IsServed")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductQuantity")
                        .HasColumnType("int");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EditedById");

                    b.HasIndex("ProductId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedById = "b08ba7ee-0960-4656-baf4-980b1d6b88df",
                            CreatedDate = new DateTime(2023, 7, 2, 12, 16, 50, 468, DateTimeKind.Utc).AddTicks(2609),
                            Info = "Order 1 information",
                            IsReady = false,
                            IsServed = false,
                            ProductId = 1,
                            ProductQuantity = 0,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            CreatedById = "b08ba7ee-0960-4656-baf4-980b1d6b88df",
                            CreatedDate = new DateTime(2023, 7, 2, 12, 16, 50, 468, DateTimeKind.Utc).AddTicks(2611),
                            Info = "Order 2 information",
                            IsReady = false,
                            IsServed = false,
                            ProductId = 2,
                            ProductQuantity = 0,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 3,
                            CreatedById = "b08ba7ee-0960-4656-baf4-980b1d6b88df",
                            CreatedDate = new DateTime(2023, 7, 2, 12, 16, 50, 468, DateTimeKind.Utc).AddTicks(2612),
                            Info = "Order 3 information",
                            IsReady = false,
                            IsServed = false,
                            ProductId = 3,
                            ProductQuantity = 0,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 4,
                            CreatedById = "b08ba7ee-0960-4656-baf4-980b1d6b88df",
                            CreatedDate = new DateTime(2023, 7, 2, 12, 16, 50, 468, DateTimeKind.Utc).AddTicks(2613),
                            Info = "Order 4 information",
                            IsReady = false,
                            IsServed = false,
                            ProductId = 4,
                            ProductQuantity = 0,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 5,
                            CreatedById = "b08ba7ee-0960-4656-baf4-980b1d6b88df",
                            CreatedDate = new DateTime(2023, 7, 2, 12, 16, 50, 468, DateTimeKind.Utc).AddTicks(2613),
                            Info = "Order 5 information",
                            IsReady = false,
                            IsServed = false,
                            ProductId = 5,
                            ProductQuantity = 0,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 6,
                            CreatedById = "b08ba7ee-0960-4656-baf4-980b1d6b88df",
                            CreatedDate = new DateTime(2023, 7, 2, 12, 16, 50, 468, DateTimeKind.Utc).AddTicks(2614),
                            Info = "Order 6 information",
                            IsReady = false,
                            IsServed = false,
                            ProductId = 6,
                            ProductQuantity = 0,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 7,
                            CreatedById = "b08ba7ee-0960-4656-baf4-980b1d6b88df",
                            CreatedDate = new DateTime(2023, 7, 2, 12, 16, 50, 468, DateTimeKind.Utc).AddTicks(2615),
                            Info = "Order 7 information",
                            IsReady = false,
                            IsServed = false,
                            ProductId = 7,
                            ProductQuantity = 0,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 8,
                            CreatedById = "b08ba7ee-0960-4656-baf4-980b1d6b88df",
                            CreatedDate = new DateTime(2023, 7, 2, 12, 16, 50, 468, DateTimeKind.Utc).AddTicks(2616),
                            Info = "Order 8 information",
                            IsReady = false,
                            IsServed = false,
                            ProductId = 8,
                            ProductQuantity = 0,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 9,
                            CreatedById = "b08ba7ee-0960-4656-baf4-980b1d6b88df",
                            CreatedDate = new DateTime(2023, 7, 2, 12, 16, 50, 468, DateTimeKind.Utc).AddTicks(2617),
                            Info = "Order 9 information",
                            IsReady = false,
                            IsServed = false,
                            ProductId = 9,
                            ProductQuantity = 0,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 10,
                            CreatedById = "b08ba7ee-0960-4656-baf4-980b1d6b88df",
                            CreatedDate = new DateTime(2023, 7, 2, 12, 16, 50, 468, DateTimeKind.Utc).AddTicks(2618),
                            Info = "Order 10 information",
                            IsReady = false,
                            IsServed = false,
                            ProductId = 10,
                            ProductQuantity = 0,
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("RestoFlow.Infrastructure.Data.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Img")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "Fresh salmon fillet grilled to perfection and served with a side of steamed vegetables.",
                            Img = "grilled_salmon.jpg",
                            IsDeleted = false,
                            Name = "Grilled Salmon",
                            Price = 10.2m
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Description = "Tender breaded chicken breast topped with marinara sauce and melted mozzarella cheese, served with pasta.",
                            Img = "chicken_parmesan.jpg",
                            IsDeleted = false,
                            Name = "Chicken Parmesan",
                            Price = 30.2m
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Description = "Juicy beef patty topped with cheese, lettuce, tomato, and pickles, served on a toasted bun.",
                            Img = "beef_burger.jpg",
                            IsDeleted = false,
                            Name = "Beef Burger",
                            Price = 10.4m
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            Description = "Assorted fresh vegetables stir-fried to perfection in a flavorful sauce, served over steamed rice.",
                            Img = "vegetable_stir_fry.jpg",
                            IsDeleted = false,
                            Name = "Vegetable Stir-Fry",
                            Price = 123.2m
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            Description = "Homemade ravioli stuffed with succulent lobster meat, served with a creamy tomato sauce.",
                            Img = "lobster_ravioli.jpg",
                            IsDeleted = false,
                            Name = "Lobster Ravioli",
                            Price = 123.54m
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 1,
                            Description = "Tender pork tenderloin marinated in a savory blend of herbs and spices, grilled to perfection.",
                            Img = "pork_tenderloin.jpg",
                            IsDeleted = false,
                            Name = "Pork Tenderloin",
                            Price = 10.42m
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 1,
                            Description = "Slices of breaded and fried eggplant layered with marinara sauce and melted mozzarella cheese.",
                            Img = "eggplant_parmesan.jpg",
                            IsDeleted = false,
                            Name = "Eggplant Parmesan",
                            Price = 13.21m
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 1,
                            Description = "Plump shrimp sautéed in garlic butter and white wine, served over a bed of linguine pasta.",
                            Img = "shrimp_scampi.jpg",
                            IsDeleted = false,
                            Name = "Shrimp Scampi",
                            Price = 112.43m
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 1,
                            Description = "Creamy risotto cooked with fresh mushrooms, Parmesan cheese, and a hint of truffle oil.",
                            Img = "mushroom_risotto.jpg",
                            IsDeleted = false,
                            Name = "Mushroom Risotto",
                            Price = 132.23m
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 1,
                            Description = "Grilled steak served with a side of crispy French fries and a tangy dipping sauce.",
                            Img = "steak_frites.jpg",
                            IsDeleted = false,
                            Name = "Steak Frites",
                            Price = 99.19m
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 2,
                            Description = "Classic New York-style cheesecake with a buttery graham cracker crust and creamy filling.",
                            Img = "cheesecake.jpg",
                            IsDeleted = false,
                            Name = "Cheesecake",
                            Price = 0m
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 2,
                            Description = "Layers of espresso-soaked ladyfingers and creamy mascarpone cheese, dusted with cocoa powder.",
                            Img = "tiramisu.jpg",
                            IsDeleted = false,
                            Name = "Tiramisu",
                            Price = 0m
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 2,
                            Description = "Homemade apple pie with a flaky crust and a sweet and tangy apple filling.",
                            Img = "apple_pie.jpg",
                            IsDeleted = false,
                            Name = "Apple Pie",
                            Price = 0m
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 2,
                            Description = "Velvety smooth chocolate mousse topped with a dollop of whipped cream and chocolate shavings.",
                            Img = "chocolate_mousse.jpg",
                            IsDeleted = false,
                            Name = "Chocolate Mousse",
                            Price = 0m
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 2,
                            Description = "Light and fluffy shortcake layered with fresh strawberries and whipped cream.",
                            Img = "strawberry_shortcake.jpg",
                            IsDeleted = false,
                            Name = "Strawberry Shortcake",
                            Price = 0m
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 2,
                            Description = "Tangy lemon filling in a buttery tart shell, topped with a dusting of powdered sugar.",
                            Img = "lemon_tart.jpg",
                            IsDeleted = false,
                            Name = "Lemon Tart",
                            Price = 0m
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 2,
                            Description = "Smooth and creamy Italian dessert made with sweetened cream and gelatin.",
                            Img = "panna_cotta.jpg",
                            IsDeleted = false,
                            Name = "Panna Cotta",
                            Price = 0m
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 2,
                            Description = "Moist and velvety red velvet cake with layers of cream cheese frosting.",
                            Img = "red_velvet_cake.jpg",
                            IsDeleted = false,
                            Name = "Red Velvet Cake",
                            Price = 0m
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 2,
                            Description = "Refreshing pie made with tangy key lime juice and a sweet graham cracker crust.",
                            Img = "key_lime_pie.jpg",
                            IsDeleted = false,
                            Name = "Key Lime Pie",
                            Price = 0m
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 2,
                            Description = "Classic homemade chocolate chip cookies with gooey chocolate chips and a soft, chewy texture.",
                            Img = "chocolate_chip_cookies.jpg",
                            IsDeleted = false,
                            Name = "Chocolate Chip Cookies",
                            Price = 0m
                        },
                        new
                        {
                            Id = 21,
                            CategoryId = 3,
                            Description = "Chilled coffee served over ice with a splash of milk and a hint of sweetness.",
                            Img = "iced_coffee.jpg",
                            IsDeleted = false,
                            Name = "Iced Coffee",
                            Price = 0m
                        },
                        new
                        {
                            Id = 22,
                            CategoryId = 3,
                            Description = "Refreshing smoothie made with ripe mangoes, yogurt, and a touch of honey.",
                            Img = "mango_smoothie.jpg",
                            IsDeleted = false,
                            Name = "Mango Smoothie",
                            Price = 0m
                        },
                        new
                        {
                            Id = 23,
                            CategoryId = 3,
                            Description = "Steeped green tea leaves with a delicate and soothing flavor.",
                            Img = "green_tea.jpg",
                            IsDeleted = false,
                            Name = "Green Tea",
                            Price = 0m
                        },
                        new
                        {
                            Id = 24,
                            CategoryId = 3,
                            Description = "Freshly squeezed orange juice packed with vitamin C and a burst of citrus flavor.",
                            Img = "orange_juice.jpg",
                            IsDeleted = false,
                            Name = "Orange Juice",
                            Price = 0m
                        },
                        new
                        {
                            Id = 25,
                            CategoryId = 3,
                            Description = "Homemade lemonade made with freshly squeezed lemons and a touch of sweetness.",
                            Img = "lemonade.jpg",
                            IsDeleted = false,
                            Name = "Lemonade",
                            Price = 0m
                        },
                        new
                        {
                            Id = 26,
                            CategoryId = 3,
                            Description = "Classic Cuban cocktail made with rum, fresh mint leaves, lime juice, and a hint of sweetness.",
                            Img = "mojito.jpg",
                            IsDeleted = false,
                            Name = "Mojito",
                            Price = 0m
                        },
                        new
                        {
                            Id = 27,
                            CategoryId = 3,
                            Description = "Rich and creamy hot chocolate topped with whipped cream and chocolate shavings.",
                            Img = "hot_chocolate.jpg",
                            IsDeleted = false,
                            Name = "Hot Chocolate",
                            Price = 0m
                        },
                        new
                        {
                            Id = 28,
                            CategoryId = 3,
                            Description = "Bubbly and refreshing carbonated water with a clean and crisp taste.",
                            Img = "sparkling_water.jpg",
                            IsDeleted = false,
                            Name = "Sparkling Water",
                            Price = 0m
                        },
                        new
                        {
                            Id = 29,
                            CategoryId = 3,
                            Description = "Chilled black tea served over ice, optionally sweetened and garnished with a slice of lemon.",
                            Img = "iced_tea.jpg",
                            IsDeleted = false,
                            Name = "Iced Tea",
                            Price = 0m
                        },
                        new
                        {
                            Id = 30,
                            CategoryId = 3,
                            Description = "A tropical blend of assorted fruit juices with a sweet and tangy flavor.",
                            Img = "fruit_punch.jpg",
                            IsDeleted = false,
                            Name = "Fruit Punch",
                            Price = 0m
                        },
                        new
                        {
                            Id = 31,
                            CategoryId = 4,
                            Description = "Classic Caesar salad with crisp romaine lettuce, Parmesan cheese, croutons, and tangy Caesar dressing.",
                            Img = "caesar_salad.jpg",
                            IsDeleted = false,
                            Name = "Caesar Salad",
                            Price = 0m
                        },
                        new
                        {
                            Id = 32,
                            CategoryId = 4,
                            Description = "Fresh mozzarella cheese, ripe tomatoes, and basil leaves drizzled with balsamic glaze and olive oil.",
                            Img = "caprese_salad.jpg",
                            IsDeleted = false,
                            Name = "Caprese Salad",
                            Price = 0m
                        },
                        new
                        {
                            Id = 33,
                            CategoryId = 4,
                            Description = "Classic Greek salad with fresh lettuce, tomatoes, cucumbers, olives, feta cheese, and a tangy dressing.",
                            Img = "greek_salad.jpg",
                            IsDeleted = false,
                            Name = "Greek Salad",
                            Price = 0m
                        },
                        new
                        {
                            Id = 34,
                            CategoryId = 4,
                            Description = "Assorted greens topped with grilled chicken, avocado, bacon, hard-boiled eggs, and blue cheese crumbles.",
                            Img = "cobb_salad.jpg",
                            IsDeleted = false,
                            Name = "Cobb Salad",
                            Price = 0m
                        },
                        new
                        {
                            Id = 35,
                            CategoryId = 4,
                            Description = "Fresh spinach leaves topped with sliced strawberries, goat cheese, and a light vinaigrette dressing.",
                            Img = "spinach_salad.jpg",
                            IsDeleted = false,
                            Name = "Spinach Salad",
                            Price = 0m
                        },
                        new
                        {
                            Id = 36,
                            CategoryId = 4,
                            Description = "A French salad made with tuna, boiled eggs, green beans, potatoes, olives, and a Dijon vinaigrette.",
                            Img = "nicoise_salad.jpg",
                            IsDeleted = false,
                            Name = "Nicoise Salad",
                            Price = 0m
                        },
                        new
                        {
                            Id = 37,
                            CategoryId = 4,
                            Description = "A refreshing salad made with crisp apples, celery, grapes, walnuts, and a creamy dressing.",
                            Img = "waldorf_salad.jpg",
                            IsDeleted = false,
                            Name = "Waldorf Salad",
                            Price = 0m
                        },
                        new
                        {
                            Id = 38,
                            CategoryId = 4,
                            Description = "A vibrant salad with mixed greens, grilled corn, black beans, tomatoes, avocado, and a zesty dressing.",
                            Img = "mexican_salad.jpg",
                            IsDeleted = false,
                            Name = "Mexican Salad",
                            Price = 0m
                        },
                        new
                        {
                            Id = 39,
                            CategoryId = 4,
                            Description = "A protein-packed salad made with flaky tuna, crunchy vegetables, and a tangy mayonnaise dressing.",
                            Img = "tuna_salad.jpg",
                            IsDeleted = false,
                            Name = "Tuna Salad",
                            Price = 0m
                        },
                        new
                        {
                            Id = 40,
                            CategoryId = 4,
                            Description = "A nutritious salad made with quinoa, fresh vegetables, herbs, and a zesty lemon dressing.",
                            Img = "quinoa_salad.jpg",
                            IsDeleted = false,
                            Name = "Quinoa Salad",
                            Price = 0m
                        });
                });

            modelBuilder.Entity("RestoFlow.Infrastructure.Data.Models.Reservation", b =>
                {
                    b.Property<int>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservationId"), 1L, 1);

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<int>("PartySize")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ReservationId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservations");

                    b.HasData(
                        new
                        {
                            ReservationId = 1,
                            IsCancelled = false,
                            PartySize = 4,
                            ReservationDate = new DateTime(2023, 7, 3, 15, 16, 50, 468, DateTimeKind.Local).AddTicks(2651),
                            UserId = "b08ba7ee-0960-4656-baf4-980b1d6b88df"
                        },
                        new
                        {
                            ReservationId = 2,
                            IsCancelled = false,
                            PartySize = 6,
                            ReservationDate = new DateTime(2023, 7, 4, 15, 16, 50, 468, DateTimeKind.Local).AddTicks(2682),
                            UserId = "b08ba7ee-0960-4656-baf4-980b1d6b88df"
                        },
                        new
                        {
                            ReservationId = 3,
                            IsCancelled = false,
                            PartySize = 2,
                            ReservationDate = new DateTime(2023, 7, 5, 15, 16, 50, 468, DateTimeKind.Local).AddTicks(2685),
                            UserId = "b08ba7ee-0960-4656-baf4-980b1d6b88df"
                        },
                        new
                        {
                            ReservationId = 4,
                            IsCancelled = false,
                            PartySize = 5,
                            ReservationDate = new DateTime(2023, 7, 6, 15, 16, 50, 468, DateTimeKind.Local).AddTicks(2687),
                            UserId = "b08ba7ee-0960-4656-baf4-980b1d6b88df"
                        },
                        new
                        {
                            ReservationId = 5,
                            IsCancelled = false,
                            PartySize = 3,
                            ReservationDate = new DateTime(2023, 7, 7, 15, 16, 50, 468, DateTimeKind.Local).AddTicks(2689),
                            UserId = "b08ba7ee-0960-4656-baf4-980b1d6b88df"
                        },
                        new
                        {
                            ReservationId = 6,
                            IsCancelled = false,
                            PartySize = 8,
                            ReservationDate = new DateTime(2023, 7, 8, 15, 16, 50, 468, DateTimeKind.Local).AddTicks(2691),
                            UserId = "b08ba7ee-0960-4656-baf4-980b1d6b88df"
                        },
                        new
                        {
                            ReservationId = 7,
                            IsCancelled = false,
                            PartySize = 2,
                            ReservationDate = new DateTime(2023, 7, 9, 15, 16, 50, 468, DateTimeKind.Local).AddTicks(2694),
                            UserId = "b08ba7ee-0960-4656-baf4-980b1d6b88df"
                        },
                        new
                        {
                            ReservationId = 8,
                            IsCancelled = false,
                            PartySize = 4,
                            ReservationDate = new DateTime(2023, 7, 10, 15, 16, 50, 468, DateTimeKind.Local).AddTicks(2696),
                            UserId = "b08ba7ee-0960-4656-baf4-980b1d6b88df"
                        },
                        new
                        {
                            ReservationId = 9,
                            IsCancelled = false,
                            PartySize = 6,
                            ReservationDate = new DateTime(2023, 7, 11, 15, 16, 50, 468, DateTimeKind.Local).AddTicks(2698),
                            UserId = "b08ba7ee-0960-4656-baf4-980b1d6b88df"
                        },
                        new
                        {
                            ReservationId = 10,
                            IsCancelled = false,
                            PartySize = 3,
                            ReservationDate = new DateTime(2023, 7, 12, 15, 16, 50, 468, DateTimeKind.Local).AddTicks(2700),
                            UserId = "b08ba7ee-0960-4656-baf4-980b1d6b88df"
                        });
                });

            modelBuilder.Entity("RestoFlow.Infrastructure.Data.Models.ReservationTable", b =>
                {
                    b.Property<int>("TableId")
                        .HasColumnType("int");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.HasKey("TableId", "ReservationId");

                    b.HasIndex("ReservationId");

                    b.ToTable("ReservationTable");

                    b.HasData(
                        new
                        {
                            TableId = 1,
                            ReservationId = 1
                        },
                        new
                        {
                            TableId = 2,
                            ReservationId = 2
                        },
                        new
                        {
                            TableId = 3,
                            ReservationId = 3
                        },
                        new
                        {
                            TableId = 4,
                            ReservationId = 4
                        },
                        new
                        {
                            TableId = 5,
                            ReservationId = 5
                        },
                        new
                        {
                            TableId = 6,
                            ReservationId = 6
                        },
                        new
                        {
                            TableId = 7,
                            ReservationId = 7
                        },
                        new
                        {
                            TableId = 8,
                            ReservationId = 8
                        },
                        new
                        {
                            TableId = 9,
                            ReservationId = 9
                        },
                        new
                        {
                            TableId = 10,
                            ReservationId = 10
                        });
                });

            modelBuilder.Entity("RestoFlow.Infrastructure.Data.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("RestoFlow.Infrastructure.Data.Models.Table", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Seats")
                        .HasColumnType("int");

                    b.Property<int>("TableNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Seats = 4,
                            TableNumber = 1
                        },
                        new
                        {
                            Id = 2,
                            Seats = 6,
                            TableNumber = 2
                        },
                        new
                        {
                            Id = 3,
                            Seats = 2,
                            TableNumber = 3
                        },
                        new
                        {
                            Id = 4,
                            Seats = 8,
                            TableNumber = 4
                        },
                        new
                        {
                            Id = 5,
                            Seats = 4,
                            TableNumber = 5
                        },
                        new
                        {
                            Id = 6,
                            Seats = 6,
                            TableNumber = 6
                        },
                        new
                        {
                            Id = 7,
                            Seats = 2,
                            TableNumber = 7
                        },
                        new
                        {
                            Id = 8,
                            Seats = 4,
                            TableNumber = 8
                        },
                        new
                        {
                            Id = 9,
                            Seats = 6,
                            TableNumber = 9
                        },
                        new
                        {
                            Id = 10,
                            Seats = 2,
                            TableNumber = 10
                        },
                        new
                        {
                            Id = 11,
                            Seats = 4,
                            TableNumber = 11
                        },
                        new
                        {
                            Id = 12,
                            Seats = 6,
                            TableNumber = 12
                        },
                        new
                        {
                            Id = 13,
                            Seats = 2,
                            TableNumber = 13
                        },
                        new
                        {
                            Id = 14,
                            Seats = 4,
                            TableNumber = 14
                        },
                        new
                        {
                            Id = 15,
                            Seats = 6,
                            TableNumber = 15
                        },
                        new
                        {
                            Id = 16,
                            Seats = 2,
                            TableNumber = 16
                        },
                        new
                        {
                            Id = 17,
                            Seats = 4,
                            TableNumber = 17
                        },
                        new
                        {
                            Id = 18,
                            Seats = 6,
                            TableNumber = 18
                        },
                        new
                        {
                            Id = 19,
                            Seats = 2,
                            TableNumber = 19
                        },
                        new
                        {
                            Id = 20,
                            Seats = 4,
                            TableNumber = 20
                        },
                        new
                        {
                            Id = 21,
                            Seats = 6,
                            TableNumber = 21
                        },
                        new
                        {
                            Id = 22,
                            Seats = 2,
                            TableNumber = 22
                        },
                        new
                        {
                            Id = 23,
                            Seats = 4,
                            TableNumber = 23
                        },
                        new
                        {
                            Id = 24,
                            Seats = 6,
                            TableNumber = 24
                        },
                        new
                        {
                            Id = 25,
                            Seats = 2,
                            TableNumber = 25
                        },
                        new
                        {
                            Id = 26,
                            Seats = 4,
                            TableNumber = 26
                        },
                        new
                        {
                            Id = 27,
                            Seats = 6,
                            TableNumber = 27
                        },
                        new
                        {
                            Id = 28,
                            Seats = 2,
                            TableNumber = 28
                        },
                        new
                        {
                            Id = 29,
                            Seats = 4,
                            TableNumber = 29
                        },
                        new
                        {
                            Id = 30,
                            Seats = 6,
                            TableNumber = 30
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RestoFlow.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RestoFlow.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestoFlow.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RestoFlow.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RestoFlow.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.HasOne("RestoFlow.Infrastructure.Data.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("RestoFlow.Infrastructure.Data.Models.Bill", b =>
                {
                    b.HasOne("RestoFlow.Infrastructure.Data.Models.Table", "Table")
                        .WithMany("Bills")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RestoFlow.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany("Bills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Table");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RestoFlow.Infrastructure.Data.Models.OccupiedTable", b =>
                {
                    b.HasOne("RestoFlow.Infrastructure.Data.Models.Order", "Order")
                        .WithMany("OccupiedTables")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RestoFlow.Infrastructure.Data.Models.Table", "Table")
                        .WithMany("OccupiedTables")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RestoFlow.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany("OccupiedTables")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Table");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RestoFlow.Infrastructure.Data.Models.Order", b =>
                {
                    b.HasOne("RestoFlow.Infrastructure.Data.Models.Bill", null)
                        .WithMany("Orders")
                        .HasForeignKey("BillId");

                    b.HasOne("RestoFlow.Infrastructure.Data.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestoFlow.Infrastructure.Data.Models.ApplicationUser", "EditedBy")
                        .WithMany()
                        .HasForeignKey("EditedById");

                    b.HasOne("RestoFlow.Infrastructure.Data.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("EditedBy");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("RestoFlow.Infrastructure.Data.Models.Product", b =>
                {
                    b.HasOne("RestoFlow.Infrastructure.Data.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("RestoFlow.Infrastructure.Data.Models.Reservation", b =>
                {
                    b.HasOne("RestoFlow.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RestoFlow.Infrastructure.Data.Models.ReservationTable", b =>
                {
                    b.HasOne("RestoFlow.Infrastructure.Data.Models.Reservation", "Reservation")
                        .WithMany("ReservationTables")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RestoFlow.Infrastructure.Data.Models.Table", "Table")
                        .WithMany("ReservationTables")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Reservation");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("RestoFlow.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Bills");

                    b.Navigation("OccupiedTables");
                });

            modelBuilder.Entity("RestoFlow.Infrastructure.Data.Models.Bill", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("RestoFlow.Infrastructure.Data.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("RestoFlow.Infrastructure.Data.Models.Order", b =>
                {
                    b.Navigation("OccupiedTables");
                });

            modelBuilder.Entity("RestoFlow.Infrastructure.Data.Models.Reservation", b =>
                {
                    b.Navigation("ReservationTables");
                });

            modelBuilder.Entity("RestoFlow.Infrastructure.Data.Models.Table", b =>
                {
                    b.Navigation("Bills");

                    b.Navigation("OccupiedTables");

                    b.Navigation("ReservationTables");
                });
#pragma warning restore 612, 618
        }
    }
}
